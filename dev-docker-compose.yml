version: "3"

services:
  nginx:
    container_name: phase-nginx-dev
    build:
      context: .
      dockerfile: ./nginx/Dockerfile
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - phase-net-dev

  frontend:
    container_name: phase-frontend-dev
    restart: unless-stopped
    depends_on:
      - backend
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    volumes:
      - ./frontend/:/app/
    env_file: .env
    environment:
      NEXTAUTH_URL: "${HTTP_PROTOTOCL}${HOST}"
      OAUTH_REDIRECT_URI: "${HTTP_PROTOTOCL}${HOST}"
      BACKEND_API_BASE: "http://backend:8000"
      NEXT_PUBLIC_BACKEND_API_BASE: "${HTTP_PROTOTOCL}${HOST}/ph-backend"
      NEXT_PUBLIC_NEXTAUTH_PROVIDERS: "${SSO_PROVIDERS}"
    networks:
      - phase-net-dev

  backend:
    container_name: phase-backend-dev
    restart: unless-stopped
    depends_on:
      - postgres
    build:
    context: ./backend
    dockerfile: Dockerfile.dev
    volumes:
      -  ## Write a volume for backend
    env_file: .env
    environment:
      ALLOWED_HOSTS: "${HOST},backend"
      ALLOWED_ORIGINS: "${HTTP_PROTOTOCL}${HOST}"
      SESSION_COOKIE_DOMAIN: "${HOST}"
    networks:
      - phase-net

  postgres:
    container_name: phase-postgres
    image: postgres
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: "trust"
    volumes:
      - phase-postgres-data-dev:/var/lib/postgresql/data
    networks:
      - phase-net-dev

volumes:
  phase-postgres-data-dev:
    driver: local

networks:
  phase-net-dev:
