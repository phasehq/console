services:
  nginx:
    container_name: phase-nginx-dev
    build:
      context: .
      dockerfile: ./nginx/Dockerfile
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - phase-net-dev

  frontend:
    container_name: phase-frontend-dev
    restart: unless-stopped
    depends_on:
      - backend
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    volumes:
      - ./frontend/:/app/
      - /app/node_modules
    env_file: .env.dev
    networks:
      - phase-net-dev

  backend:
    container_name: phase-backend-dev
    restart: unless-stopped
    depends_on:
      - postgres
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    volumes:
      - ./backend/:/app/
    env_file: .env.dev
    networks:
      - phase-net-dev

  postgres:
    container_name: phase-postgres
    image: postgres:15.4-alpine3.17
    restart: always
    env_file:
      - .env.dev
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: "trust"
    volumes:
      - phase-postgres-data-dev:/var/lib/postgresql/data
    networks:
      - phase-net-dev

  redis:
    container_name: phase-redis-dev
    image: redis:alpine3.19
    restart: always
    ports:
      - "6379:6379"
    networks:
      - phase-net-dev

  rqworker:
    container_name: phase-rqworker-dev
    restart: unless-stopped
    depends_on:
      - backend
      - redis
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    command: python manage.py rqworker default #overrides CMD in the dockerfile
    volumes:
      - ./backend/:/app/
    env_file: .env.dev
    networks:
      - phase-net-dev


volumes:
  phase-postgres-data-dev:
    driver: local

networks:
  phase-net-dev:
