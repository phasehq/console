type Query {
  organisations: [OrganisationType]
  roles(orgId: ID): [RoleType]
  organisationNameAvailable(name: String): Boolean
  license: PhaseLicenseType
  organisationLicense(organisationId: ID): ActivatedPhaseLicenseType
  organisationPlan(organisationId: ID): OrganisationPlanType
  organisationMembers(organisationId: ID, userId: ID, role: [String]): [OrganisationMemberType]
  organisationGlobalAccessUsers(organisationId: ID): [OrganisationMemberType]
  organisationInvites(orgId: ID): [OrganisationMemberInviteType]
  validateInvite(inviteId: ID): OrganisationMemberInviteType
  apps(organisationId: ID, appId: ID): [AppType]
  logs(appId: ID, start: BigInt, end: BigInt): LogsResponseType
  kmsLogsCount(appId: ID, thisMonth: Boolean): Int
  secretsLogsCount(appId: ID): Int
  appActivityChart(appId: ID, period: TimeRange): [ChartDataPointType]
  appEnvironments(appId: ID, environmentId: ID, memberId: ID, memberType: MemberType): [EnvironmentType]
  appUsers(appId: ID): [OrganisationMemberType]
  appServiceAccounts(appId: ID): [ServiceAccountType]
  secrets(envId: ID, path: String): [SecretType]
  folders(envId: ID, path: String): [SecretFolderType]
  secretHistory(secretId: ID): [SecretEventType]
  secretTags(orgId: ID): [SecretTagType]
  environmentKeys(appId: ID, environmentId: ID, memberId: ID): [EnvironmentKeyType]
  environmentTokens(environmentId: ID): [EnvironmentTokenType]
  userTokens(organisationId: ID): [UserTokenType]
  serviceTokens(appId: ID): [ServiceTokenType]
  serviceAccounts(orgId: ID, serviceAccountId: ID): [ServiceAccountType]
  serviceAccountHandlers(orgId: ID): [OrganisationMemberType]
  serverPublicKey: String
  sseEnabled(appId: ID): Boolean
  providers: [ProviderType]
  services: [ServiceType]
  savedCredentials(orgId: ID): [ProviderCredentialsType]
  syncs(orgId: ID, appId: ID, envId: ID): [EnvironmentSyncType]
  envSyncs(envId: ID): [EnvironmentSyncType]
  cloudflarePagesProjects(credentialId: ID): [CloudFlarePagesType]
  awsSecrets(credentialId: ID): [AWSSecretType]
  githubRepos(credentialId: ID): [GitHubRepoType]
  gitlabProjects(credentialId: ID): [GitLabProjectType]
  gitlabGroups(credentialId: ID): [GitLabGroupType]
  railwayProjects(credentialId: ID): [RailwayProjectType]
  vercelProjects(credentialId: ID): [VercelTeamProjectsType]
  testVercelCreds(credentialId: ID): Boolean
  testVaultCreds(credentialId: ID): Boolean
  testNomadCreds(credentialId: ID): Boolean
  stripeCheckoutDetails(stripeSessionId: String!): StripeCheckoutDetails
}

type OrganisationType {
  id: String!
  name: String!
  identityKey: String!
  createdAt: DateTime
  plan: ApiOrganisationPlanChoices!
  role: RoleType
  memberId: ID
  keyring: String
  recovery: String
  planDetail: OrganisationPlanType
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

enum ApiOrganisationPlanChoices {
  """Free"""
  FR

  """Pro"""
  PR

  """Enterprise"""
  EN
}

type RoleType {
  id: String!
  name: String
  description: String
  color: String
  permissions: JSONString
  isDefault: Boolean
}

"""
Allows use of a JSON String for input / output from the GraphQL schema.

Use of this type is *not recommended* as you lose the benefits of having a defined, static
schema (one of the key benefits of GraphQL).
"""
scalar JSONString

type OrganisationPlanType {
  name: String
  maxUsers: Int
  maxApps: Int
  maxEnvsPerApp: Int
  seatsUsed: SeatsUsed
  appCount: Int
}

type SeatsUsed {
  users: Int
  serviceAccounts: Int
  total: Int
}

type PhaseLicenseType {
  id: String
  customerName: String
  organisationName: String
  plan: PlanTier
  seats: Int
  tokens: Int
  issuedAt: Date
  expiresAt: Date
  environment: String
  licenseType: String
  signatureDate: String
  issuingAuthority: String
  isActivated: Boolean
  organisationOwner: OrganisationMemberType
}

enum PlanTier {
  PRO_PLAN
  ENTERPRISE_PLAN
}

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

type OrganisationMemberType {
  id: String!
  role: RoleType
  identityKey: String
  wrappedKeyring: String!
  createdAt: DateTime
  updatedAt: DateTime!
  email: String
  username: String
  fullName: String
  avatarUrl: String
  self: Boolean
}

type ActivatedPhaseLicenseType {
  id: String!
  customerName: String!
  organisation: OrganisationType!
  plan: ApiActivatedPhaseLicensePlanChoices!
  seats: Int
  tokens: Int
  metadata: JSONString!
  environment: String!
  licenseType: String!
  signatureDate: Date!
  issuingAuthority: String!
  issuedAt: DateTime!
  expiresAt: DateTime!
  activatedAt: DateTime!
}

enum ApiActivatedPhaseLicensePlanChoices {
  """Free"""
  FR

  """Pro"""
  PR

  """Enterprise"""
  EN
}

type OrganisationMemberInviteType {
  id: String!
  organisation: OrganisationType!
  apps: [AppType!]!
  invitedBy: OrganisationMemberType!
  inviteeEmail: String!
  valid: Boolean!
  createdAt: DateTime
  updatedAt: DateTime!
  expiresAt: DateTime!
}

type AppType {
  id: String!
  name: String!
  identityKey: String!
  appVersion: Int!
  appToken: String!
  appSeed: String!
  wrappedKeyShare: String!
  createdAt: DateTime
  sseEnabled: Boolean!
  serviceAccounts: [ServiceAccountType!]!
  environments: [EnvironmentType]!
  members: [OrganisationMemberType]!
}

type ServiceAccountType {
  id: String!
  name: String!
  role: RoleType
  identityKey: String
  createdAt: DateTime
  updatedAt: DateTime!
  thirdPartyAuthEnabled: Boolean
  handlers: [ServiceAccountHandlerType]
  tokens: [ServiceAccountTokenType]
  appMemberships: [AppType!]
}

type ServiceAccountHandlerType {
  id: String!
  serviceAccount: ServiceAccountType!
  user: OrganisationMemberType!
  wrappedKeyring: String!
  wrappedRecovery: String!
  createdAt: DateTime
  updatedAt: DateTime!
}

type ServiceAccountTokenType {
  id: String!
  serviceAccount: ServiceAccountType!
  name: String!
  identityKey: String!
  token: String!
  wrappedKeyShare: String!
  createdBy: OrganisationMemberType
  createdAt: DateTime
  updatedAt: DateTime!
  deletedAt: DateTime
  expiresAt: DateTime
  secreteventSet: [SecretEventType!]!
  lastUsed: DateTime
}

type SecretEventType {
  id: String!
  secret: SecretType!
  environment: EnvironmentType!
  path: String!
  user: OrganisationMemberType
  serviceToken: ServiceTokenType
  serviceAccount: ServiceAccountType
  serviceAccountToken: ServiceAccountTokenType
  key: String!
  value: String!
  version: Int!
  tags: [SecretTagType!]!
  comment: String!
  eventType: ApiSecretEventEventTypeChoices!
  timestamp: DateTime!
  ipAddress: String
  userAgent: String
}

type SecretType {
  id: String!
  environment: EnvironmentType!
  folder: SecretFolderType
  path: String!
  key: String!
  value: String!
  version: Int!
  tags: [SecretTagType!]!
  comment: String!
  createdAt: DateTime
  updatedAt: DateTime!
  history: [SecretEventType]
  override: PersonalSecretType
}

type EnvironmentType {
  id: String!
  app: AppType!
  name: String!
  envType: ApiEnvironmentEnvTypeChoices!
  index: Int!
  identityKey: String!
  wrappedSeed: String!
  wrappedSalt: String!
  createdAt: DateTime
  updatedAt: DateTime!
  folderCount: Int
  secretCount: Int
  members: [OrganisationMemberType]!
  syncs: [EnvironmentSyncType]!
}

enum ApiEnvironmentEnvTypeChoices {
  """Development"""
  DEV

  """Staging"""
  STAGING

  """Production"""
  PROD

  """Custom"""
  CUSTOM
}

type EnvironmentSyncType {
  id: String!
  environment: EnvironmentType!
  path: String!
  options: JSONString!
  authentication: ProviderCredentialsType
  isActive: Boolean!
  createdAt: DateTime
  lastSync: DateTime
  status: ApiEnvironmentSyncStatusChoices!
  serviceInfo: ServiceType
  history: [EnvironmentSyncEventType!]!
}

type ProviderCredentialsType {
  id: String!
  name: String!
  provider: ProviderType
  credentials: JSONString!
  createdAt: DateTime
  updatedAt: DateTime!
  syncCount: Int
}

type ProviderType {
  id: String!
  name: String!
  expectedCredentials: [String!]!
  optionalCredentials: [String!]!
  authScheme: String
}

enum ApiEnvironmentSyncStatusChoices {
  """In progress"""
  IN_PROGRESS

  """Completed"""
  COMPLETED

  """cancelled"""
  CANCELLED

  """Timed out"""
  TIMED_OUT

  """Failed"""
  FAILED
}

type ServiceType {
  id: String
  name: String
  resourceType: String
  provider: ProviderType
}

type EnvironmentSyncEventType {
  meta: JSONString
  id: String!
  envSync: EnvironmentSyncType!
  status: ApiEnvironmentSyncEventStatusChoices!
  createdAt: DateTime
  completedAt: DateTime
}

enum ApiEnvironmentSyncEventStatusChoices {
  """In progress"""
  IN_PROGRESS

  """Completed"""
  COMPLETED

  """cancelled"""
  CANCELLED

  """Timed out"""
  TIMED_OUT

  """Failed"""
  FAILED
}

type SecretFolderType {
  id: String!
  environment: EnvironmentType!
  path: String!
  name: String!
  createdAt: DateTime
  updatedAt: DateTime!
  folderCount: Int
  secretCount: Int
}

type SecretTagType {
  id: String!
  name: String!
  color: String!
}

type PersonalSecretType {
  id: String!
  secret: SecretType!
  user: OrganisationMemberType!
  value: String
  isActive: Boolean!
  createdAt: DateTime
  updatedAt: DateTime!
}

type ServiceTokenType {
  id: String!
  keys: [ServerEnvironmentKeyType!]!
  identityKey: String!
  token: String!
  wrappedKeyShare: String!
  name: String!
  createdBy: OrganisationMemberType
  createdAt: DateTime
  updatedAt: DateTime!
  expiresAt: DateTime
}

type ServerEnvironmentKeyType {
  id: String!
  environment: EnvironmentType!
  identityKey: String!
  wrappedSeed: String!
  wrappedSalt: String!
  createdAt: DateTime
  updatedAt: DateTime!
}

enum ApiSecretEventEventTypeChoices {
  """Create"""
  C

  """Read"""
  R

  """Update"""
  U

  """Delete"""
  D
}

type LogsResponseType {
  kms: [KMSLogType]
  secrets: [SecretEventType]
}

type KMSLogType implements Node {
  id: ID!
  timestamp: BigInt
  appId: String
  phaseNode: String
  eventType: String
  ipAddress: String
  phSize: Int
  asn: Int
  isp: String
  edgeLocation: String
  country: String
  city: String
  latitude: Float
  longitude: Float
}

"""An object with an ID"""
interface Node {
  """The ID of the object"""
  id: ID!
}

"""
The `BigInt` scalar type represents non-fractional whole numeric values.
`BigInt` is not constrained to 32-bit like the `Int` type and thus is a less
compatible type.
"""
scalar BigInt

type ChartDataPointType {
  index: Int
  date: BigInt
  data: Int
}

enum TimeRange {
  HOUR
  DAY
  WEEK
  MONTH
  YEAR
  ALL_TIME
}

enum MemberType {
  USER
  SERVICE
}

type EnvironmentKeyType {
  id: String!
  environment: EnvironmentType!
  identityKey: String!
  wrappedSeed: String!
  wrappedSalt: String!
  createdAt: DateTime
  updatedAt: DateTime!
}

type EnvironmentTokenType {
  id: String!
  name: String!
  identityKey: String!
  token: String!
  wrappedKeyShare: String!
  createdAt: DateTime
  updatedAt: DateTime!
}

type UserTokenType {
  id: String!
  name: String!
  identityKey: String!
  token: String!
  wrappedKeyShare: String!
  createdAt: DateTime
  updatedAt: DateTime!
  expiresAt: DateTime
}

type CloudFlarePagesType {
  name: String
  deploymentId: String
  environments: [String]
}

type AWSSecretType {
  name: String
  arn: String
}

type GitHubRepoType {
  name: String
  owner: String
  type: String
}

type GitLabProjectType {
  id: ID
  name: String
  nameWithNamespace: String
  path: String
  pathWithNamespace: String
  createdAt: DateTime
  defaultBranch: String
  tagList: [String]
  topics: [String]
  sshUrlToRepo: String
  httpUrlToRepo: String
  webUrl: String
  avatarUrl: String
  starCount: Int
  lastActivityAt: DateTime
  namespace: NamespaceType
}

type NamespaceType {
  id: ID
  name: String
  path: String
  fullPath: String
}

type GitLabGroupType {
  id: ID
  name: String
  path: String
  description: String
  visibility: String
  shareWithGroupLock: Boolean
  requireTwoFactorAuthentication: Boolean
  twoFactorGracePeriod: Int
  projectCreationLevel: String
  autoDevopsEnabled: Boolean
  subgroupCreationLevel: String
  emailsDisabled: Boolean
  emailsEnabled: Boolean
  mentionsDisabled: Boolean
  lfsEnabled: Boolean
  defaultBranch: String
  defaultBranchProtection: Int
  avatarUrl: String
  webUrl: String
  requestAccessEnabled: Boolean
  repositoryStorage: String
  fullName: String
  fullPath: String
  fileTemplateProjectId: ID
  parentId: ID
  createdAt: DateTime
}

type RailwayProjectType {
  id: ID!
  name: String!
  environments: [RailwayEnvironmentType!]!
  services: [RailwayServiceType!]!
}

type RailwayEnvironmentType {
  id: ID!
  name: String!
  projectId: ID!
}

type RailwayServiceType {
  id: ID!
  name: String!
}

type VercelTeamProjectsType {
  id: String!
  teamName: String!
  projects: [VercelProjectType]
}

type VercelProjectType {
  id: ID!
  name: String!
  environment: [String]
}

type StripeCheckoutDetails {
  paymentStatus: String
  customerEmail: String
  billingStartDate: String
  billingEndDate: String
  subscriptionId: String
  planName: String
}

type Mutation {
  createOrganisation(id: ID!, identityKey: String!, name: String!, wrappedKeyring: String!, wrappedRecovery: String!): CreateOrganisationMutation
  inviteOrganisationMember(apps: [String], email: String!, orgId: ID!): InviteOrganisationMemberMutation
  createOrganisationMember(identityKey: String!, inviteId: ID!, orgId: ID!, wrappedKeyring: String, wrappedRecovery: String): CreateOrganisationMemberMutation
  deleteOrganisationMember(memberId: ID!): DeleteOrganisationMemberMutation
  updateOrganisationMemberRole(memberId: ID!, roleId: ID!): UpdateOrganisationMemberRole
  updateMemberWrappedSecrets(orgId: ID!, wrappedKeyring: String!, wrappedRecovery: String!): UpdateUserWrappedSecretsMutation
  deleteInvitation(inviteId: ID!): DeleteInviteMutation
  createApp(appSeed: String!, appToken: String!, appVersion: Int!, id: ID!, identityKey: String!, name: String!, organisationId: ID!, wrappedKeyShare: String!): CreateAppMutation
  rotateAppKeys(appToken: String!, id: ID!, wrappedKeyShare: String!): RotateAppKeysMutation
  deleteApp(id: ID!): DeleteAppMutation
  addAppMember(appId: ID, envKeys: [EnvironmentKeyInput], memberId: ID, memberType: MemberType): AddAppMemberMutation
  removeAppMember(appId: ID, memberId: ID, memberType: MemberType): RemoveAppMemberMutation
  updateMemberEnvironmentScope(appId: ID, envKeys: [EnvironmentKeyInput], memberId: ID, memberType: MemberType): UpdateMemberEnvScopeMutation
  createEnvironment(adminKeys: [EnvironmentKeyInput], environmentData: EnvironmentInput!, wrappedSalt: String, wrappedSeed: String): CreateEnvironmentMutation
  deleteEnvironment(environmentId: ID!): DeleteEnvironmentMutation
  renameEnvironment(environmentId: ID!, name: String!): RenameEnvironmentMutation
  swapEnvironmentOrder(environment1Id: ID!, environment2Id: ID!): SwapEnvironmentOrderMutation
  createEnvironmentKey(envId: ID!, identityKey: String!, userId: ID, wrappedSalt: String!, wrappedSeed: String!): CreateEnvironmentKeyMutation
  createEnvironmentToken(envId: ID!, identityKey: String!, name: String!, token: String!, wrappedKeyShare: String!): CreateEnvironmentTokenMutation
  createCustomRole(color: String, description: String, name: String, organisationId: ID!, permissions: JSONString): CreateCustomRoleMutation
  updateCustomRole(color: String, description: String, id: ID!, name: String, permissions: JSONString): UpdateCustomRoleMutation
  deleteCustomRole(id: ID!): DeleteCustomRoleMutation
  createServiceAccount(handlers: [ServiceAccountHandlerInput], identityKey: String, name: String, organisationId: ID, roleId: ID, serverWrappedKeyring: String, serverWrappedRecovery: String): CreateServiceAccountMutation
  enableServiceAccountThirdPartyAuth(serverWrappedKeyring: String, serverWrappedRecovery: String, serviceAccountId: ID): EnableServiceAccountThirdPartyAuthMutation
  updateServiceAccountHandlers(handlers: [ServiceAccountHandlerInput], organisationId: ID): UpdateServiceAccountHandlersMutation
  updateServiceAccount(name: String, roleId: ID, serviceAccountId: ID): UpdateServiceAccountMutation
  deleteServiceAccount(serviceAccountId: ID): DeleteServiceAccountMutation
  createServiceAccountToken(expiry: BigInt, identityKey: String!, name: String!, serviceAccountId: ID, token: String!, wrappedKeyShare: String!): CreateServiceAccountTokenMutation
  deleteServiceAccountToken(tokenId: ID): DeleteServiceAccountTokenMutation
  initEnvSync(appId: ID, envKeys: [EnvironmentKeyInput]): InitEnvSync
  deleteEnvSync(syncId: ID): DeleteSync
  triggerSync(syncId: ID): TriggerSync
  toggleSyncActive(syncId: ID): ToggleSyncActive
  updateSyncAuthentication(credentialId: ID, syncId: ID): UpdateSyncAuthentication
  createProviderCredentials(credentials: JSONString, name: String, orgId: ID, provider: String): CreateProviderCredentials
  updateProviderCredentials(credentialId: ID, credentials: JSONString, name: String): UpdateProviderCredentials
  deleteProviderCredentials(credentialId: ID): DeleteProviderCredentials
  createCloudflarePagesSync(credentialId: ID, deploymentId: ID, envId: ID, path: String, projectEnv: String, projectName: String): CreateCloudflarePagesSync
  createAwsSecretSync(credentialId: ID, envId: ID, kmsId: String, path: String, secretName: String): CreateAWSSecretsManagerSync
  createGhActionsSync(credentialId: ID, envId: ID, owner: String, path: String, repoName: String): CreateGitHubActionsSync
  createVaultSync(credentialId: ID, engine: String, envId: ID, path: String, vaultPath: String): CreateVaultSync
  createNomadSync(credentialId: ID, envId: ID, nomadNamespace: String, nomadPath: String, path: String): CreateNomadSync
  createGitlabCiSync(credentialId: ID, envId: ID, isGroup: Boolean, masked: Boolean, path: String, protected: Boolean, resourceId: String, resourcePath: String): CreateGitLabCISync
  createRailwaySync(credentialId: ID, envId: ID, path: String, railwayEnvironment: RailwayResourceInput, railwayProject: RailwayResourceInput, railwayService: RailwayResourceInput): CreateRailwaySync
  createVercelSync(credentialId: ID, envId: ID, environment: String, path: String, projectId: String, projectName: String, secretType: String, teamId: String, teamName: String): CreateVercelSync
  createUserToken(expiry: BigInt, identityKey: String!, name: String!, orgId: ID!, token: String!, wrappedKeyShare: String!): CreateUserTokenMutation
  deleteUserToken(tokenId: ID!): DeleteUserTokenMutation
  createServiceToken(appId: ID!, environmentKeys: [EnvironmentKeyInput], expiry: BigInt, identityKey: String!, name: String!, token: String!, wrappedKeyShare: String!): CreateServiceTokenMutation
  deleteServiceToken(tokenId: ID!): DeleteServiceTokenMutation
  createSecretFolder(envId: ID, name: String, path: String): CreateSecretFolderMutation
  deleteSecretFolder(folderId: ID): DeleteSecretFolderMutation
  createSecretTag(color: String!, name: String!, orgId: ID!): CreateSecretTagMutation
  createSecret(secretData: SecretInput): CreateSecretMutation
  editSecret(id: ID!, secretData: SecretInput): EditSecretMutation
  deleteSecret(id: ID!): DeleteSecretMutation
  readSecret(ids: [ID]): ReadSecretMutation
  createSecrets(secretsData: [SecretInput]!): BulkCreateSecretMutation
  editSecrets(secretsData: [SecretInput]!): BulkEditSecretMutation
  deleteSecrets(ids: [ID]!): BulkDeleteSecretMutation
  createOverride(overrideData: PersonalSecretInput): CreatePersonalSecretMutation
  removeOverride(secretId: ID): DeletePersonalSecretMutation
  createLockbox(input: LockboxInput): CreateLockboxMutation
  createProUpgradeCheckoutSession(billingPeriod: String, organisationId: ID!): CreateProUpgradeCheckoutSession
}

type CreateOrganisationMutation {
  organisation: OrganisationType
}

type InviteOrganisationMemberMutation {
  invite: OrganisationMemberInviteType
}

type CreateOrganisationMemberMutation {
  orgMember: OrganisationMemberType
}

type DeleteOrganisationMemberMutation {
  ok: Boolean
}

type UpdateOrganisationMemberRole {
  orgMember: OrganisationMemberType
}

type UpdateUserWrappedSecretsMutation {
  orgMember: OrganisationMemberType
}

type DeleteInviteMutation {
  ok: Boolean
}

type CreateAppMutation {
  app: AppType
}

type RotateAppKeysMutation {
  app: AppType
}

type DeleteAppMutation {
  ok: Boolean
}

type AddAppMemberMutation {
  app: AppType
}

input EnvironmentKeyInput {
  envId: ID!
  userId: ID
  identityKey: String!
  wrappedSeed: String!
  wrappedSalt: String!
}

type RemoveAppMemberMutation {
  app: AppType
}

type UpdateMemberEnvScopeMutation {
  app: AppType
}

type CreateEnvironmentMutation {
  environment: EnvironmentType
}

input EnvironmentInput {
  appId: ID!
  name: String!
  envType: String!
  wrappedSeed: String!
  wrappedSalt: String!
  identityKey: String!
}

type DeleteEnvironmentMutation {
  ok: Boolean
}

type RenameEnvironmentMutation {
  environment: EnvironmentType
}

type SwapEnvironmentOrderMutation {
  ok: Boolean
}

type CreateEnvironmentKeyMutation {
  environmentKey: EnvironmentKeyType
}

type CreateEnvironmentTokenMutation {
  environmentToken: EnvironmentTokenType
}

type CreateCustomRoleMutation {
  role: RoleType
}

type UpdateCustomRoleMutation {
  role: RoleType
}

type DeleteCustomRoleMutation {
  ok: Boolean
}

type CreateServiceAccountMutation {
  serviceAccount: ServiceAccountType
}

input ServiceAccountHandlerInput {
  serviceAccountId: ID
  memberId: ID
  wrappedKeyring: String!
  wrappedRecovery: String!
}

type EnableServiceAccountThirdPartyAuthMutation {
  serviceAccount: ServiceAccountType
}

type UpdateServiceAccountHandlersMutation {
  ok: Boolean
}

type UpdateServiceAccountMutation {
  serviceAccount: ServiceAccountType
}

type DeleteServiceAccountMutation {
  ok: Boolean
}

type CreateServiceAccountTokenMutation {
  token: ServiceAccountTokenType
}

type DeleteServiceAccountTokenMutation {
  ok: Boolean
}

type InitEnvSync {
  app: AppType
}

type DeleteSync {
  ok: Boolean
}

type TriggerSync {
  sync: EnvironmentSyncType
}

type ToggleSyncActive {
  ok: Boolean
}

type UpdateSyncAuthentication {
  sync: EnvironmentSyncType
}

type CreateProviderCredentials {
  credential: ProviderCredentialsType
}

type UpdateProviderCredentials {
  credential: ProviderCredentialsType
}

type DeleteProviderCredentials {
  ok: Boolean
}

type CreateCloudflarePagesSync {
  sync: EnvironmentSyncType
}

type CreateAWSSecretsManagerSync {
  sync: EnvironmentSyncType
}

type CreateGitHubActionsSync {
  sync: EnvironmentSyncType
}

type CreateVaultSync {
  sync: EnvironmentSyncType
}

type CreateNomadSync {
  sync: EnvironmentSyncType
}

type CreateGitLabCISync {
  sync: EnvironmentSyncType
}

type CreateRailwaySync {
  sync: EnvironmentSyncType
}

input RailwayResourceInput {
  id: ID!
  name: String!
}

type CreateVercelSync {
  sync: EnvironmentSyncType
}

type CreateUserTokenMutation {
  ok: Boolean
  userToken: UserTokenType
}

type DeleteUserTokenMutation {
  ok: Boolean
}

type CreateServiceTokenMutation {
  serviceToken: ServiceTokenType
}

type DeleteServiceTokenMutation {
  ok: Boolean
}

type CreateSecretFolderMutation {
  folder: SecretFolderType
}

type DeleteSecretFolderMutation {
  ok: Boolean
}

type CreateSecretTagMutation {
  tag: SecretTagType
}

type CreateSecretMutation {
  secret: SecretType
}

input SecretInput {
  id: ID
  envId: ID
  path: String
  key: String!
  keyDigest: String!
  value: String!
  tags: [String]
  comment: String
}

type EditSecretMutation {
  secret: SecretType
}

type DeleteSecretMutation {
  secret: SecretType
}

type ReadSecretMutation {
  ok: Boolean
}

type BulkCreateSecretMutation {
  secrets: [SecretType]
}

type BulkEditSecretMutation {
  secrets: [SecretType]
}

type BulkDeleteSecretMutation {
  secrets: [SecretType]
}

type CreatePersonalSecretMutation {
  override: PersonalSecretType
}

input PersonalSecretInput {
  secretId: ID
  value: String
  isActive: Boolean
}

type DeletePersonalSecretMutation {
  ok: Boolean
}

type CreateLockboxMutation {
  lockbox: LockboxType
}

type LockboxType {
  id: String!
  data: JSONString!
  views: Int!
  createdAt: DateTime
  expiresAt: DateTime
  allowedViews: Int
}

input LockboxInput {
  data: JSONString
  allowedViews: Int
  expiry: BigInt
}

type CreateProUpgradeCheckoutSession {
  clientSecret: String
}