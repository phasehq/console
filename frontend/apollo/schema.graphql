type Query {
  organisations: [OrganisationType]
  apps(organisationId: ID, appId: ID): [AppType]
  logs(appId: ID, start: BigInt, end: BigInt): [KMSLogType]
  logsCount(appId: ID, thisMonth: Boolean): Int
  appActivityChart(appId: ID, period: TimeRange): [ChartDataPointType]
  appEnvironments(appId: ID): [EnvironmentType]
  secrets(envId: ID): [SecretType]
  secretHistory(secretId: ID): [SecretEventType]
  secretTags(orgId: ID): [SecretTagType]
}

type OrganisationType {
  id: String!
  name: String!
  identityKey: String!
  createdAt: DateTime
  plan: ApiOrganisationPlanChoices!
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""An enumeration."""
enum ApiOrganisationPlanChoices {
  """Free"""
  FR

  """Pro"""
  PR

  """Enterprise"""
  EN
}

type AppType {
  id: String!
  name: String!
  identityKey: String!
  appVersion: Int!
  appToken: String!
  appSeed: String!
  wrappedKeyShare: String!
  createdAt: DateTime
}

type KMSLogType implements Node {
  id: ID!
  timestamp: BigInt
  appId: String
  phaseNode: String
  eventType: String
  ipAddress: String
  phSize: Int
  asn: Int
  isp: String
  edgeLocation: String
  country: String
  city: String
  latitude: Float
  longitude: Float
}

"""An object with an ID"""
interface Node {
  """The ID of the object"""
  id: ID!
}

"""
The `BigInt` scalar type represents non-fractional whole numeric values.
`BigInt` is not constrained to 32-bit like the `Int` type and thus is a less
compatible type.
"""
scalar BigInt

type ChartDataPointType {
  index: Int
  date: BigInt
  data: Int
}

"""An enumeration."""
enum TimeRange {
  HOUR
  DAY
  WEEK
  MONTH
  YEAR
  ALL_TIME
}

type EnvironmentType {
  id: String!
  name: String!
  envType: ApiEnvironmentEnvTypeChoices!
  wrappedSeed: String!
  wrappedSalt: String!
  createdAt: DateTime
  updatedAt: DateTime!
}

"""An enumeration."""
enum ApiEnvironmentEnvTypeChoices {
  """Development"""
  DEV

  """Staging"""
  STAGING

  """Production"""
  PROD
}

type SecretType implements Node {
  """The ID of the object"""
  id: ID!
  history: [SecretEventType]
}

type SecretEventType {
  id: String!
  key: String!
  value: String!
  version: Int!
  tags: [String!]!
  comment: String!
  eventType: ApiSecretEventEventTypeChoices!
  timestamp: DateTime!
}

"""An enumeration."""
enum ApiSecretEventEventTypeChoices {
  """Create"""
  C

  """Read"""
  R

  """Update"""
  U

  """Delete"""
  D
}

type SecretTagType {
  id: String!
  name: String!
}

type Mutation {
  createOrganisation(id: ID!, identityKey: String!, name: String!): CreateOrganisationMutation
  createApp(appSeed: String!, appToken: String!, appVersion: Int!, id: ID!, identityKey: String!, name: String!, organisationId: ID!, wrappedKeyShare: String!): CreateAppMutation
  rotateAppKeys(appToken: String!, id: ID!, wrappedKeyShare: String!): RotateAppKeysMutation
  deleteApp(id: ID!): DeleteAppMutation
  createEnvironment(appId: ID!, envType: String!, id: ID!, identityKey: String!, name: String!, wrappedSalt: String!, wrappedSeed: String!): CreateEnvironmentMutation
  createEnvironmentKey(envId: ID!, id: ID!, identityKey: String!, userId: ID!, wrappedSalt: String!, wrappedSeed: String!): CreateEnvironmentKeyMutation
  createEnvironmentSecret(envId: ID!, id: ID!, identityKey: String!, name: String!, token: String!, wrappedKeyShare: String!): CreateEnvironmentSecretMutation
  createSecretFolder(envId: ID!, id: ID!, name: String!, parentFolderId: ID): CreateSecretFolderMutation
  createSecretTag(id: ID!, name: String!, orgId: ID!): CreateSecretTagMutation
  createSecret(comment: String, envId: ID!, folderId: ID, id: ID!, key: String!, keyDigest: String!, tags: [String], value: String!): CreateSecretMutation
  editSecret(comment: String, folderId: ID, id: ID!, key: String!, keyDigest: String!, tags: [String], value: String!): EditSecretMutation
  deleteSecret(id: ID!): DeleteSecretMutation
}

type CreateOrganisationMutation {
  organisation: OrganisationType
}

type CreateAppMutation {
  app: AppType
}

type RotateAppKeysMutation {
  app: AppType
}

type DeleteAppMutation {
  app: AppType
}

type CreateEnvironmentMutation {
  env: EnvironmentType
}

type CreateEnvironmentKeyMutation {
  envKey: EnvironmentKeyType
}

type EnvironmentKeyType {
  id: String!
  identityKey: String!
  wrappedSeed: String!
  wrappedSalt: String!
  createdAt: DateTime
  updatedAt: DateTime!
}

type CreateEnvironmentSecretMutation {
  envSecret: EnvironmentSecretType
}

type EnvironmentSecretType {
  id: String!
  name: String!
  identityKey: String!
  token: String!
  wrappedKeyShare: String!
  createdAt: DateTime
  updatedAt: DateTime!
}

type CreateSecretFolderMutation {
  folder: SecretFolderType
}

type SecretFolderType {
  id: String!
  name: String!
  createdAt: DateTime
  updatedAt: DateTime!
}

type CreateSecretTagMutation {
  tag: SecretTagType
}

type CreateSecretMutation {
  secret: SecretType
}

type EditSecretMutation {
  secret: SecretType
}

type DeleteSecretMutation {
  secret: SecretType
}