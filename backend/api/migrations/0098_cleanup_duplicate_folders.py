# Generated by Django 4.2.16 on 2025-04-02 09:45

from django.db import migrations
from django.db.models import Count


def deduplicate_folders(apps, schema_editor):
    SecretFolder = apps.get_model("api", "SecretFolder")
    Secret = apps.get_model("api", "Secret")

    # Step 1: Find duplicate root folders (folder IS NULL) grouped by (environment_id, name, path)
    duplicates = (
        SecretFolder.objects.filter(folder__isnull=True)  # Only root folders
        .values("environment_id", "name", "path")
        .annotate(count=Count("id"))
        .filter(count__gt=1)  # More than one exists
    )

    for duplicate in duplicates:
        env_id = duplicate["environment_id"]
        name = duplicate["name"]
        path = duplicate["path"]

        # Step 2: Get all duplicate folder instances
        folders = list(
            SecretFolder.objects.filter(
                environment_id=env_id, name=name, path=path, folder__isnull=True
            ).order_by(
                "id"
            )  # Ensure deterministic selection
        )

        # Step 3: Choose the first folder as the canonical one
        canonical_folder = folders[0]
        duplicate_ids = [f.id for f in folders[1:]]  # All other duplicates

        # Step 4: Update Secrets pointing to duplicate folders
        Secret.objects.filter(folder_id__in=duplicate_ids).update(
            folder=canonical_folder
        )

        # Step 5: Update Subfolders pointing to duplicate folders
        SecretFolder.objects.filter(folder_id__in=duplicate_ids).update(
            folder=canonical_folder
        )

        # Step 6: Delete all but the canonical folder
        SecretFolder.objects.filter(id__in=duplicate_ids).delete()


class Migration(migrations.Migration):

    dependencies = [
        # ("api", "0098_remove_secretfolder_unique_secret_folder_and_more"),
        ("api", "0097_alter_secretfolder_unique_together_and_more")
    ]

    operations = [
        migrations.RunPython(deduplicate_folders),
    ]
